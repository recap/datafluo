// Block definition (there may be more than one block per file)
FUNCTION_BLOCK replication

// Define input variables
VAR_INPUT
    resourceLoad : REAL;
    taskLoad : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    replication : REAL;
END_VAR

// Fuzzify input variable 'resourceLoad'
FUZZIFY resourceLoad
	TERM very_low := (0,1) (0.2,1) (0.4,0);
    TERM low := (0.25, 0) (0.5, 1) (0.75, 0); 
    TERM normal := (0.5, 0) (0.75, 1) (1.1, 0);
    TERM high := (0.75, 0) (1, 1) (1.5, 0);
	TERM very_high := (1.25,0) (2,1) (3,1);
END_FUZZIFY

// Fuzzify input variable 'taskLoad'
FUZZIFY taskLoad
    TERM ideal := (0.75, 0) (1, 1) (1.25, 0) ;
    TERM high := (1,0) (1.5,1) (2, 0);
	TERM very_high := (1.5,0) (2,1) (3,1);
	TERM low := (0,0) (0.5,1) (1,0);
	TERM very_low := (0,1) (0.1,1) (0.5,0);
END_FUZZIFY

// Defzzzify output variable 'replicationCount'
DEFUZZIFY replication
	TERM zero := (-1,0) (0,1) (1,0);
    TERM negative_slow := (-5, 0) (-3, 1) (0,0);
    TERM positive_slow := (0, 0) (3,1) (5,0);
	TERM positive_agr := (3,0) (10,1) (15,1);
	TERM negative_agr := (-15,1) (-10,1) (-3,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF taskLoad IS very_high AND resourceLoad IS very_low
                THEN replication IS positive_agr;
	RULE 2 : IF taskLoad IS very_high AND resourceLoad IS low
				THEN replication IS positive_agr;
	RULE 3 : IF taskLoad IS high AND resourceLoad IS very_low
				THEN replication IS positive_agr;
	RULE 4 : IF taskLoad IS high AND resourceLoad IS low
				THEN replication IS positive_slow;
	RULE 5 : IF taskLoad IS very_high AND resourceLoad IS normal
				THEN replication IS positive_slow;
	RULE 6 : IF taskLoad IS ideal AND resourceLoad IS normal
				THEN replication IS zero;
	RULE 7 : IF taskLoad IS very_low AND resourceLoad IS high
				THEN replication IS negative_agr;
	RULE 8 : IF taskLoad IS very_low AND resourceLoad IS very_high
				THEN replication IS negative_agr;
	RULE 9 : IF taskLoad IS low AND resourceLoad IS high
				THEN replication IS negative_slow;
	RULE 10 : IF taskLoad IS low AND resourceLoad IS normal
				THEN replication IS zero;
	RULE 11 : IF taskLoad IS very_low AND resourceLoad IS high
				THEN replication IS negative_agr;
	RULE 12 : IF taskLoad IS ideal AND resourceLoad IS very_high
				THEN replication IS negative_slow;
	RULE 13 : IF taskLoad IS low AND resourceLoad IS very_high
				THEN replication IS negative_slow;
	RULE 14 : IF resourceLoad IS very_low AND taskLoad IS NOT very_low
				THEN replication IS positive_agr;
	RULE 15 : IF taskLoad IS low AND (resourceLoad IS very_low OR resourceLoad IS low)
				THEN replication IS positive_slow;


END_RULEBLOCK

END_FUNCTION_BLOCK
