/*=========================================================================
  Program:   vlport
  Module:    $RCSfile: serializer.h,v $
  Language:  C++
  Date:      $Date: 2008-05-07 10:10:24 $
  Version:   $Revision: 1.1.1.1 $

  Developer Dmitry Vasyunin

     This software is distributed WITHOUT ANY WARRANTY; without even 
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
     PURPOSE.  See the above copyright notice for more information.
=========================================================================*/
#ifndef _SERIALIZER_H_
#define _SERIALIZER_H_

#include <rpc/types.h>
#include <rpc/xdr.h>

#include <iostream>
#include <string>
//#include <fstream>

//! A class provides a way for serialization/deserialization for basic datatypes
/*!
	This class should be used with input/output streams.
	Operators "<<" and ">>" are overloaded for all basic
	datatypes like int, double, float etc.
	Example of usage:
	\code
	std::ostream *myostream = new MyCoolOutputStream;
	int a = 123;
	double b = 3.14;
	Serializer s;
	*myostream << s << a << b;
	std::istream *myistream = new MyCoolInputStream;
	*myistream >> s >> a >> b;
	\endcode
	\exceptions EOFException, XDRException
	\note Currently the follow datatypes are supported:
	long, unsigned long, int, unsigned int, short, unsigned short,
	double, float, std::string 
*/
class Serializer
{

    friend Serializer& operator <<(std::ostream& os, Serializer &xdrser);   
    friend Serializer& operator >>(std::istream& is, Serializer &xdrser); 
	
    public:
		//! A base class for exceptions which can be generated by "<<" and ">>" operators of Serializer
        class Exception
        {
         protected: 
            const char *reason; 
                        
         public: 
              		                                                 
		    Exception(){reason="General Exception";};
            const char *getReason(void){return reason;};         
            
	     protected:
		    virtual ~Exception(){};
        };    	
    	//! end of file has reached, can't get next value
		class EOFException : public Serializer::Exception
		{
         public:
            EOFException(){reason="EOF Exception";};
		};	
		//! the data can't be serialized/deserialized (xdr exception, possible corrupted data in the input stream)
		class XDRException : public Serializer::Exception
		{
         public: 
            XDRException(){reason="XDF Exception";};; 
           
		};
    
        static const size_t XDRIntSize    = 4;
        static const size_t XDRUnsignedIntSize    = 4;
        static const size_t XDRShortSize    = 4;
        static const size_t XDRUnsignedShortSize    = 4;
        static const size_t XDRDoubleSize = 8;
        static const size_t XDRFloatSize  = 4;
        static const size_t XDRLongSize  = 4;        
        static const size_t XDRUnsignedLongSize  = 4;
   		static const size_t PAGE_SIZE	= 4096;
		Serializer(){};
		 ~Serializer(){};
		
        Serializer& operator << (long arg); /**< Serialize long value*/       
        Serializer&  operator >> (long &arg);/**< Deserialize long value*/
        Serializer& operator << (unsigned long arg); /**< Serialize unsigned long value*/        
        Serializer&  operator >> (unsigned long &arg);/**< Deserialize unsigned long value*/
        
        Serializer& operator << (int arg); /**< Serialize int value*/      
        Serializer&  operator >> (int &arg); /**< Deserialize int value*/  
        Serializer& operator << (unsigned int arg);/**< Serialize unsigned int value*/       
        Serializer&  operator >> (unsigned int &arg);/**< Deserialize unsigned int value*/
    
        Serializer& operator << (short arg); /**< Serialize short value*/          
        Serializer&  operator >> (short &arg);/**< Deserialize short value*/
        Serializer& operator << (unsigned short arg);/**< Serialize unsigned short value*/       
        Serializer&  operator >> (unsigned short &arg);/**< Deserialize unsigned short value*/
    
        Serializer& operator << (double arg); /**< Serialize double value*/       
        Serializer&  operator >> (double &arg);/**< Deserialize double value*/
        Serializer& operator << (float arg);/**< Serialize float value*/          
        Serializer&  operator >> (float &arg);/**< Deserialize float value*/
        
        Serializer& operator << (const std::string& arg);/**< Serialize std::string value*/ 
	    Serializer& operator >> (std::string& arg); /**< Deserialize std::string value*/
	    
   		Serializer& operator << (std::istream &argis);
		Serializer& operator >> (std::ostream &argos);

	protected:
         XDR    xdrs;
         std::ostream* os;
         std::istream* is;
};


#endif	//_SERIALIZER_H_
